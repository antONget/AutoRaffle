import asyncio

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config_data.config import Config, load_config
from database import requests as rq
from database.models import User, Prize
from utils.error_handling import error_handler
from keyboards.start_keyboard import keyboard_start, keyboard_start_admin
from filter.subscribe_channel import ChannelProtect
from filter.admin_filter import check_super_admin, IsSuperAdmin

import logging

router = Router()
config: Config = load_config()


class NumRaffle(StatesGroup):
    number = State()


@router.message(CommandStart())
@error_handler
async def process_start_command_user(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /start
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_start_command_user: {message.from_user.id}')
    await state.set_state(state=None)
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ—â–µ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    user: User = await rq.get_user_by_id(tg_id=message.from_user.id)
    if not user:
        if message.from_user.username:
            username = message.from_user.username
        else:
            username = "user_name"
        data_user = {"tg_id": message.from_user.id,
                     "username": username,
                     "role": "role"}
        await rq.add_user(data=data_user)
    else:
        if message.from_user.username:
            username = message.from_user.username
        else:
            username = "user_name"
        data_user = {"tg_id": message.from_user.id,
                     "username": username}
        await rq.add_user(data=data_user)
    list_users: list[User] = await rq.get_list_users()
    if await check_super_admin(telegram_id=message.from_user.id):
        await message.answer(text=f'–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å {len(list_users)} —á–µ–ª–æ–≤–µ–∫.\n '
                                  f'–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à"',
                             reply_markup=keyboard_start())
    else:
        await message.answer_photo(
            photo='AgACAgIAAxkBAAMgZ-lXo13TR8TNLSK_tC2t2yTYoLIAAqnsMRuYcFFL3zh9Nt2n88QBAAMCAAN4AAM2BA',
            caption=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!\n'
                    f'–ó–¥–µ—Å—å —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å —à–∏–∫–∞—Ä–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n'
                    f'–î–ª—è —É—á–∞—Å—Ç–∏—è:\n'
                    f'1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ 2 –∫–∞–Ω–∞–ª–∞:\n\n'
                    f'<a href="https://t.me/+cL9DtBv-HcFmMGE6">‚û°Ô∏è –¢–ê–ß–ö–ò –° –ó–ê–ó–û–†–û–ú</a>\n\n'
                    f'<a href="https://t.me/+6yGTwfUvRuA4YmZi">‚û°Ô∏è –ê–í–¢–û–ó–û–†üèéÔ∏èüöÄüõ©Ô∏è</a>\n\n'
                    f'2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" –Ω–∏–∂–µ. üëá\n'
                    f'3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∂–¥–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞! –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ.\n'
                    f'üîî –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π!\n –ü—É—Å—Ç—å —É–¥–∞—á–∞ –±—É–¥–µ—Ç –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!',
            reply_markup=keyboard_start(count=len(list_users)))


@router.callback_query(F.data == 'participate', ChannelProtect())
@error_handler
async def process_registaration(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_registaration: {message.from_user.id}')
    await message.answer(text="""üì¢ –î–æ—Ä–æ–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏!

–ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–º –∫–æ–Ω–∫—É—Ä—Å–µ –ø–æ —Ä–æ–∑—ã–≥—Ä—ã—à—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è! üöó –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.

–í–∞—à–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç –Ω–∞—Å, –∏ –º—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–∞–∫–æ–π —à–∏—Ä–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é. 
–ö–∞–∂–¥—ã–π –∏–∑ –≤–∞—Å —Å—Ç–∞–ª –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è!

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, –≤–µ–¥—å —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã –æ–±—ä—è–≤–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! –£–¥–∞—á–∏ –≤—Å–µ–º! üçÄ""")


@router.message(F.text == 'üéâüèÜ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à üöó‚ú®', IsSuperAdmin())
@error_handler
async def process_ruffle(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_ruffle: {message.from_user.id}')
    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º')
    await state.set_state(NumRaffle.number)


@router.message(StateFilter(NumRaffle.number), IsSuperAdmin())
@error_handler
async def process_ruffle(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_ruffle: {message.from_user.id}')
    if message.text.isdigit():
        await state.set_state(state=None)
        data = await state.get_data()

        count = 1
        if data.get('count_raffle'):
            count = data['count_raffle'] + 1
            if count == 4:
                await state.clear()
                await message.answer(text='–í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!')
                return

        await state.update_data(count_raffle=count)
        # raffle_user = ['1 –π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∞–π—Ñ–æ–Ω-@Maksim_Ipatov',
        #                '2 –π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∂–∏–≥—É–ª–∏- @Oleg_Maksimovichh',
        #                '3 –π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –±–º–≤- @VVK0404']
        prize: Prize = await rq.get_prize(id_prize=count)
        msg = await message.answer(text='–£–∂–µ –∏—â—É –≤ –∂—É—Ä–Ω–∞–ª–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...')
        msg_ = await message.answer_sticker(
            sticker='CAACAgQAAxkBAAMhZ-lX90pMKhrirF-HzdWwxki6OecAAkkDAALN9cAEs75ahlKdplY2BA')
        await asyncio.sleep(3)
        await msg.delete()
        await msg_.delete()
        await message.answer(text=f"""üéâüèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞—à–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞! ‚ú®
    
–° —Ä–∞–¥–æ—Å—Ç—å—é –æ–±—ä—è–≤–ª—è—é –∏–º—è —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–∞:
    
    {count}-–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å {prize.name_prize}
    
ü•≥ –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞—à–∏–º–∏ –∞–Ω–æ–Ω—Å–∞–º–∏
    , –≤–µ–¥—å –≤–ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏ –∞–∫—Ü–∏–π!
    
üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –µ—â–µ —Ä–∞–∑!""")
    else:
        await message.answer(text='–î–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–Ω–µ –Ω—É–∂–Ω–æ —á–∏—Å–ª–æ')
